/**
 * Michael Palmer
 * CSCI 5335 A
 * Assignment 2 - Observer Pattern
 */
import java.util.Observable;
import java.util.Observer;

/**
 * Test class
 */
public class Assignment2 {
	public static void main(String[] args) {
        // Create news subject instance
        NewsSubject newsSubject = new NewsSubject("Business", 50);

        // Create instances of US, Europe, Britain news observers
        US_News us_news = new US_News();
        Europe_News europe_news = new Europe_News();
        Britain_News britain_news = new Britain_News();

        // Add US and Europe news observers
        newsSubject.addObserver(us_news);
        newsSubject.addObserver(europe_news);

        // Get the current news type and content
        System.out.printf("Initial news type: %s\n", newsSubject.getNewsType());
        System.out.printf("Initial news revenue: $%2.2f\n\n", newsSubject.getRevenue());

        // Change news type to Sports
        newsSubject.setNewsType("Sports");
        System.out.println();

        // Add Britain news observer and update the news revenue
        newsSubject.addObserver(britain_news);
        newsSubject.setRevenue(83.14);
        System.out.println();

        // Delete the europe news observer and update the news type
        newsSubject.deleteObserver(europe_news);
        newsSubject.setNewsType("Lifestyle");
        System.out.println();

        // Update news revenue
        newsSubject.setRevenue(100);
	}
}

/**
 * Delegated Observable
 */
class DelegatedObservable extends Observable {
    @Override
    public void clearChanged() {
        super.clearChanged();
    }

    @Override
    public void setChanged() {
        super.setChanged();
    }
}

/**
 * Base News class
 */
class News {
    protected double revenue;

    /**
     * News constructor
     * @param revenue Revenue generated by news
     */
    public News(double revenue) {
        this.revenue = revenue;
    }

    /**
     * Get the current revenue
     * @return Revenue of the news
     */
    public double getRevenue() {
        return revenue;
    }

    /**
     * Set the current news revenue
     * @param revenue Revenue of the news
     */
    public void setRevenue(double revenue) {
        this.revenue = revenue;
    }
}

/**
 * News subject
 * We use a DelegatedObservable object as a property since we are extending the News class
 */
class NewsSubject extends News {
    private String newsType;
    private DelegatedObservable delegatedObservable;

    /**
     * News Subject constructor
     * @param newsType Type of the news
     * @param revenue Revenue of the news
     */
    public NewsSubject(String newsType, double revenue) {
        super(revenue);
        this.newsType = newsType;
        delegatedObservable = new DelegatedObservable();
    }

    /**
     * Get the news type
     * @return Type of the news
     */
    public String getNewsType() {
        return newsType;
    }

    /**
     * Add an observer to the DelegatedObserver
     * @param observer Observer to add
     */
    public void addObserver(Observer observer) {
        delegatedObservable.addObserver(observer);
    }

    /**
     * Delete an observer from the DelegatedObserver
     * @param observer Observer to delete
     */
    public void deleteObserver(Observer observer) {
        delegatedObservable.deleteObserver(observer);
    }

    /**
     * Set the news type and notify observers
     * @param newsType Type of the news
     */
    public void setNewsType(String newsType) {
        this.newsType = newsType;
        delegatedObservable.setChanged();
        delegatedObservable.notifyObservers(newsType);
    }

    /**
     * Set the news revenue and notify observers
     * @param revenue Revenue of the news
     */
    @Override
    public void setRevenue(double revenue) {
        super.setRevenue(revenue);
        delegatedObservable.setChanged();
        delegatedObservable.notifyObservers(revenue);
    }
}

/**
 * Observer for US news
 */
class US_News implements Observer {
    /**
     * Receives an update from the Observable
     * @param o Observable that was updated
     * @param arg Argument passed by the Observable
     */
    public void update(Observable o, Object arg) {
        if (arg.getClass().equals(Double.class)) {
            double revenue = (double) arg;
            System.out.printf("US news revenue updated to $%2.2f\n", revenue);
        } else {
            System.out.printf("US news update received for %s\n", arg);
        }
    }
}

/**
 * Observer for Europe news
 */
class Europe_News implements Observer {
    /**
     * Receives an update from the Observable
     *
     * @param o   Observable that was updated
     * @param arg Argument passed by the Observable
     */
    public void update(Observable o, Object arg) {
        if (arg.getClass().equals(Double.class)) {
            double revenue = (double) arg * 0.92;
            System.out.printf("Europe news revenue updated to €%2.2f\n", revenue);
        } else {
            System.out.printf("Europe news update received for %s\n", arg);
        }
    }
}

/**
 * Observer for Britain news
 */
class Britain_News implements Observer {
    /**
     * Receives an update from the Observable
     *
     * @param o   Observable that was updated
     * @param arg Argument passed by the Observable
     */
    public void update(Observable o, Object arg) {
        if (arg.getClass().equals(Double.class)) {
            double revenue = (double) arg * 0.7;
            System.out.printf("Britain news revenue updated to £%2.2f\n", revenue);
        } else {
            System.out.printf("Britain news update received for %s\n", arg);
        }
    }
}
